- name: Create Kubernetes Directory /etc/kubernetes/config/
  ansible.builtin.file:
    path: /etc/kubernetes/config/
    state: directory
    mode: '0755'

- name: Create Kubernetes Directory /var/lib/kubernetes/
  ansible.builtin.file:
    path: /var/lib/kubernetes/
    state: directory
    mode: '0755'

- name: Create kubectl directory
  ansible.builtin.file:
    path: /root/.kube/
    state: directory
    mode: '0755'

- name: Download Kubernetes server {{ kubernetes.version }} binaries
  ansible.builtin.get_url:
    url: https://dl.k8s.io/{{ kubernetes.version }}/bin/linux/amd64/{{ item }}
    dest: /opt/
    mode: '0644'
  loop: "{{ binaries }}"

- name: Install Kubernetes binaries
  ansible.builtin.copy:
    src: "/opt/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    remote_src: true
    mode: a+x
  loop: "{{ binaries }}"

- name: Check if certificates exist
  ansible.builtin.stat:
    path: "/home/{{ ssh_target_user }}/{{ item }}"
  register: cert_check
  loop: "{{ certs }}"

- name: Copy certificates to the Control Plane
  ansible.builtin.copy:
    src: "/home/{{ ssh_target_user }}/{{ item.item }}"
    dest: /var/lib/kubernetes/
    remote_src: true
  loop: "{{ cert_check.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stat.exists

- name: Remove certificates from root
  ansible.builtin.file:
    path: "/home/{{ ssh_target_user }}/{{ item.item }}"
    state: absent
  loop: "{{ cert_check.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stat.exists

- name: Copy service files
  ansible.builtin.copy:
    src: "{{ item }}.service"
    dest: /etc/systemd/system/
  loop: "{{ service_files }}"

- name: Check if kubeconfigs exist
  ansible.builtin.stat:
    path: "/home/{{ ssh_target_user }}/{{ item }}.kubeconfig"
  register: kubeconfig_check
  loop:
    - kube-controller-manager
    - kube-scheduler

- name: Copy kubeconfigs
  ansible.builtin.copy:
    src: "/home/{{ ssh_target_user }}/{{ item.item }}.kubeconfig"
    dest: /var/lib/kubernetes/
  loop: "{{ kubeconfig_check.results }}"
  loop_control:
    label: "{{ item.item }}.kubeconfig"
  when: item.stat.exists

- name: Remove kubeconfigs from root
  ansible.builtin.file:
    path: "/home/{{ ssh_target_user }}/{{ item.item }}.kubeconfig"
    state: absent
  loop: "{{ kubeconfig_check.results }}"
  loop_control:
    label: "{{ item.item }}.kubeconfig"
  when: item.stat.exists == true

- name: Copy kube scheduler config
  ansible.builtin.copy:
    src: kube-scheduler.yaml
    dest: /etc/kubernetes/config/

- name: Restart kube-apiserver, -controller-manager & -scheduler
  systemd:
    name: "{{ item }}"
    state: restarted
    daemon_reload: yes
    enabled: yes
  loop: "{{ service_files }}"

- name: Setup cronjob to restart master daily
  cron:
    name: "restart-master"
    special_time: daily
    job: "systemctl restart kube-apiserver kube-controller-manager kube-scheduler"