- name: create required directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /etc/cni/net.d
    - /opt/cni/bin
    - /opt/containerd
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes
    - /etc/kubernetes/manifests
    - /etc/containerd

- name: Install OS Dependencies
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: yes
  loop: "{{ dependencies }}"

##################################################
# Download, Extract, and Install Binaries
##################################################

- name: Download Binaries
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: /opt/
  loop: "{{ binaries }}"
  loop_control:
    label: "{{ item.name }}"

- name: Extract Binaries
  ansible.builtin.unarchive:
    src: "/opt/{{ item.name }}"
    dest: "{{ item.dest }}"
    mode: a+x
    remote_src: yes
    extra_opts: [--strip-components=1]
  loop: "{{ binaries }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.archive is defined

- name: Rename runc.amd64
  ansible.builtin.command: mv /opt/runc.amd64 /opt/runc

- name: Copy Binaries
  ansible.builtin.copy:
    src: "/opt/{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: a+x
    remote_src: yes
  loop: "{{ binaries }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.archive is not defined

- name: Delete downloads (cleanup)
  ansible.builtin.file:
    path: "/opt/{{ item.name }}"
    state: absent
  loop: "{{ binaries }}"
  loop_control:
    label: "{{ item.name }}"

##################################################
# Bridge Network Configuration
##################################################

- name: Set node subnet from inventory
  ansible.builtin.set_fact:
    node_subnet: "{{ hostvars[inventory_hostname].pod_cidr }}"
  when: hostvars[inventory_hostname].pod_cidr is defined

- name: Render 10-bridge.conf
  ansible.builtin.template:
    src: 10-bridge.conf.j2
    dest: /etc/cni/net.d/10-bridge.conf
    owner: root
    group: root
    mode: '0644'

- name: Copy loopback configuration
  ansible.builtin.copy:
    src: 99-loopback.conf
    dest: /etc/cni/net.d/99-loopback.conf

- name: Add the br_netfilter module
  ansible.builtin.modprobe:
    name: br_netfilter
    state: present

- name: Process CNI Bridge Crossing Traffic by IP Tables
  ansible.builtin.shell: >
    echo "net.bridge.bridge-nf-call-iptables = 1"
    >> /etc/sysctl.d/kubernetes.conf
    echo "net.bridge.bridge-nf-call-ip6tables = 1"
    >> /etc/sysctl.d/kubernetes.conf
    sysctl -p /etc/sysctl.d/kubernetes.conf

##################################################
# Containerd Configuration
##################################################

- name: Copy containerd config
  ansible.builtin.copy:
    src: containerd-config.toml
    dest: /etc/containerd/config.toml

- name: Copy containerd service
  ansible.builtin.copy:
    src: containerd.service
    dest: /etc/systemd/system/

##################################################
# Kubelet Configuration
##################################################

- name: Copy kubelet config
  ansible.builtin.copy:
    src: kubelet-config.yaml
    dest: /var/lib/kubelet/

- name: Copy kubelet service
  ansible.builtin.copy:
    src: kubelet.service
    dest: /etc/systemd/system/

##################################################
# Kubernetes Proxy Configuration
##################################################

- name: Copy kube proxy config
  ansible.builtin.copy:
    src: kube-proxy-config.yaml
    dest: /var/lib/kube-proxy/

- name: Copy kube proxy service
  ansible.builtin.copy:
    src: kube-proxy.service
    dest: /etc/systemd/system/

##################################################
# Restart Services
##################################################

- name: Restart containerd
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    daemon_reload: yes
    enabled: yes

- name: restart kubelet
  ansible.builtin.systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes

- name: restart kube-proxy
  ansible.builtin.systemd:
    name: kube-proxy
    state: restarted
    daemon_reload: yes
    enabled: yes