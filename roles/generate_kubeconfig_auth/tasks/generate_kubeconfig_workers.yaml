- name: Set Cluster Entry
  ansible.builtin.shell: >
    kubectl config set-cluster {{ cluster_name }}
    --certificate-authority=ca.crt
    --embed-certs=true
    --server={{ server_url }}:{{ server_port }}
    --kubeconfig={{ hostvars[inventory_hostname]['hostname'] }}.kubeconfig
  args:
    chdir: "{{ work_dir }}"
  loop: "{{ nodes }}"
  loop_control:
    label: "{{ item }}"

- name: Set credentials
  ansible.builtin.shell: >
    kubectl config set-credentials system:node:{{ hostvars[inventory_hostname]['hostname'] }}
    --client-certificate={{ hostvars[inventory_hostname]['hostname'] }}.crt
    --client-key={{ hostvars[inventory_hostname]['hostname'] }}.key
    --embed-certs=true
    --kubeconfig={{ hostvars[inventory_hostname]['hostname'] }}.kubeconfig
  args:
    chdir: "{{ work_dir }}"
  loop: "{{ nodes }}"
  loop_control:
    label: "{{ item }}"

- name: Set Default Context
  ansible.builtin.shell: >
    kubectl config set-context default
    --cluster={{ cluster_name }}
    --user=system:node:{{ hostvars[inventory_hostname]['hostname'] }}
    --kubeconfig={{ hostvars[inventory_hostname]['hostname'] }}.kubeconfig
  args:
    chdir: "{{ work_dir }}"
  loop: "{{ nodes }}"
  loop_control:
    label: "{{ item }}"

- name: Use Default Context
  ansible.builtin.command: kubectl config use-context default --kubeconfig={{ hostvars[inventory_hostname]['hostname'] }}.kubeconfig
  args:
    chdir: "{{ work_dir }}"
  loop: "{{ nodes }}"
  loop_control:
    label: "{{ item }}"